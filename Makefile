# Makefile pour le projet Supply Chain Satisfaction Client
# Facilite les t√¢ches de d√©veloppement courantes

.PHONY: help setup install test lint format clean run-api run-dashboard run-all docker-build docker-run

# Variables
PYTHON := python3
PIP := pip3
PROJECT_NAME := supply-satisfaction-ai

# Aide par d√©faut
help:
	@echo "üöÄ Commandes disponibles pour Supply Chain Satisfaction Client:"
	@echo ""
	@echo "üì¶ Installation & Configuration:"
	@echo "  make setup        - Configuration compl√®te du projet"
	@echo "  make install      - Installation des d√©pendances"
	@echo "  make clean        - Nettoyage des fichiers temporaires"
	@echo ""
	@echo "üîç Qualit√© du Code:"
	@echo "  make test         - Ex√©cution des tests"
	@echo "  make test-cov     - Tests avec couverture de code"
	@echo "  make lint         - V√©rification du code (flake8)"
	@echo "  make format       - Formatage automatique (black)"
	@echo "  make check        - V√©rification compl√®te (lint + tests)"
	@echo ""
	@echo "üöÄ D√©marrage des Services:"
	@echo "  make run-api      - D√©marrer l'API FastAPI"
	@echo "  make run-dashboard - D√©marrer le dashboard expert"
	@echo "  make run-basic    - D√©marrer le dashboard basique"
	@echo "  make run-all      - D√©marrer tous les services"
	@echo "  make dev          - Mode d√©veloppement interactif"
	@echo ""
	@echo "üê≥ Docker:"
	@echo "  make docker-build - Construire l'image Docker"
	@echo "  make docker-run   - Ex√©cuter via Docker"
	@echo "  make docker-stop  - Arr√™ter les conteneurs"
	@echo ""
	@echo "üìä Data Pipeline:"
	@echo "  make collect      - Collecter les avis"
	@echo "  make clean-data   - Nettoyer les donn√©es"
	@echo "  make analyze      - Analyser sentiment & motifs"
	@echo "  make pipeline     - Pipeline complet"

# Configuration du projet
setup:
	@echo "üîß Configuration du projet..."
	$(PYTHON) setup_project.py
	@echo "‚úÖ Configuration termin√©e!"

# Installation des d√©pendances
install:
	@echo "üì¶ Installation des d√©pendances..."
	$(PIP) install -r requirements.txt
	@echo "‚úÖ D√©pendances install√©es!"

# Nettoyage
clean:
	@echo "üßπ Nettoyage en cours..."
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name ".coverage" -delete
	rm -rf htmlcov/
	rm -rf .pytest_cache/
	rm -rf dist/
	rm -rf build/
	@echo "‚úÖ Nettoyage termin√©!"

# Tests
test:
	@echo "üß™ Ex√©cution des tests..."
	$(PYTHON) -m pytest tests/ -v

test-cov:
	@echo "üß™ Tests avec couverture de code..."
	$(PYTHON) -m pytest tests/ -v --cov=src --cov-report=html --cov-report=term

# V√©rification du code
lint:
	@echo "üîç V√©rification du code..."
	$(PYTHON) -m flake8 src/ tests/ --max-line-length=100 --ignore=E203,W503

# Formatage automatique
format:
	@echo "üé® Formatage du code..."
	$(PYTHON) -m black src/ tests/ --line-length=100
	$(PYTHON) -m isort src/ tests/

# V√©rification compl√®te
check: lint test
	@echo "‚úÖ V√©rification compl√®te termin√©e!"

# D√©marrage des services
run-api:
	@echo "üöÄ D√©marrage de l'API FastAPI..."
	$(PYTHON) -m uvicorn src.api:app --reload --host 0.0.0.0 --port 8000

run-dashboard:
	@echo "üé® D√©marrage du dashboard expert..."
	$(PYTHON) -m streamlit run src/dashboard_expert.py --server.port 8501

run-basic:
	@echo "üé® D√©marrage du dashboard basique..."
	$(PYTHON) -m streamlit run src/dashboard.py --server.port 8502

run-all:
	@echo "üöÄ D√©marrage de tous les services..."
	$(PYTHON) start_services.py --auto

dev:
	@echo "üë®‚Äçüíª Mode d√©veloppement interactif..."
	$(PYTHON) start_services.py

# Docker
docker-build:
	@echo "üê≥ Construction de l'image Docker..."
	docker build -t $(PROJECT_NAME) .

docker-run:
	@echo "üê≥ Ex√©cution via Docker..."
	docker run -p 8000:8000 -p 8501:8501 $(PROJECT_NAME)

docker-stop:
	@echo "üõë Arr√™t des conteneurs Docker..."
	docker stop $$(docker ps -q --filter ancestor=$(PROJECT_NAME)) 2>/dev/null || true

# Pipeline de donn√©es
collect:
	@echo "üì• Collecte des avis..."
	$(PYTHON) src/collect_trustpilot.py

clean-data:
	@echo "üßº Nettoyage des donn√©es..."
	$(PYTHON) src/clean_reviews.py

analyze:
	@echo "üß† Analyse de sentiment..."
	$(PYTHON) src/sentiment_motifs.py

pipeline: collect clean-data analyze
	@echo "‚úÖ Pipeline de donn√©es termin√©!"

# Installation compl√®te pour nouveau d√©veloppeur
onboard: setup install test
	@echo "üéâ Configuration termin√©e pour nouveau d√©veloppeur!"
	@echo "üìñ Consultez README_EXPERT.md pour plus d'informations"
	@echo "üöÄ D√©marrage rapide: make dev"

# D√©ploiement
deploy-staging:
	@echo "üöÄ D√©ploiement en staging..."
	# Ajoutez ici vos commandes de d√©ploiement

deploy-prod:
	@echo "üöÄ D√©ploiement en production..."
	# Ajoutez ici vos commandes de d√©ploiement

# Monitoring
logs:
	@echo "üìÑ Affichage des logs..."
	tail -f logs/*.log 2>/dev/null || echo "Aucun fichier de log trouv√©"

# Base de donn√©es (si utilis√©e)
db-migrate:
	@echo "üìä Migration de la base de donn√©es..."
	# Ajoutez vos commandes de migration

db-seed:
	@echo "üå± Initialisation des donn√©es..."
	# Ajoutez vos commandes d'initialisation

# CI/CD Setup
setup-secrets:
	@echo "üîê Configuration des secrets CI/CD..."
	@echo "Veuillez ajouter ces secrets √† GitHub Actions:"
	@echo "1. CODECOV_TOKEN: Token from Codecov.io"
	@echo "2. STAGING_SERVER: IP/hostname du serveur de staging"
	@echo "3. STAGING_USER: Utilisateur SSH pour le serveur de staging"
	@echo "4. STAGING_SSH_KEY: Cl√© priv√©e SSH pour le serveur de staging"
	@echo "5. MLFLOW_TRACKING_URI: URI du serveur MLflow"
	@echo "6. MLFLOW_USER: Utilisateur MLflow"
	@echo "7. MLFLOW_PASSWORD: Mot de passe MLflow"
